from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, Updater, ConversationHandler, \
    CallbackContext, CallbackQueryHandler, filters, JobQueue, Job
from telegram.error import BadRequest
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InputFile,InlineKeyboardMarkup, KeyboardButton
import mysql.connector
from mysql.connector import pooling
import urllib.request
import requests
import os
import io
import random
import asyncio
import time as tm
import re
from typing import TYPE_CHECKING, Any, Generic, Optional, Tuple, Union, cast, overload
from telegram.ext._utils.types import CCT, JobCallback
from queue import Queue
from telegram import Bot

db = {
    "host": "localhost",
    "user": "root",
    "password": "",
    "database": "Users",
}
connection_pool = pooling.MySQLConnectionPool(pool_name="mypool", pool_size=5, pool_reset_session=True, **db)

Token = "YOUR_TOKEN"
Bot_UserName = "@YOUR_BOT_NAME"


NAME,AGE, GENDER, LOOKING, CITY, BIO, CHANGEBIO, PHOTO, SAVEPHOTO, SAVE_MESSAGE, SHOW_PROFILE, MENU_EXE, WAIT_MENU_EXE, MATCHING, DEACTIVE, SHOW_WHO_LIKES, NONEACTIVE,LANGUAGE,CHECK_USER_STATE,PREMIUM,LANGUAGE_COMMAND,REPORT_USER,BANNED = range(
    23)
gender_choice = {
    'T√ºrk√ße': ["Erkek", "Kƒ±z"],
    'English': ["Male", "Female"],
    '–†—É—Å—Å–∫–∏–π': ["–Ø –ø–∞—Ä–µ–Ω—å","–Ø –¥–µ–≤—É—à–∫–∞"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–Ø —Ö–ª–æ–ø–µ—Ü—å","–Ø –¥—ñ–≤—á–∏–Ω–∞"]
}
looking_choice = {
    'T√ºrk√ße': ["Erkekler", "Kƒ±zlar"],
    'English': ["Boys", "Girls"],
    '–†—É—Å—Å–∫–∏–π': ["–ü–∞—Ä–Ω–∏", "–î–µ—É—à–∫–∏"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞"]
}
region_choice = {
    'T√ºrk√ße': ["Avrupa Yakasƒ±", "Istanbul Yakasƒ±"],
    'English': ["European side","Istanbul side"],
    '–†—É—Å—Å–∫–∏–π': ["–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞", "–°—Ç–∞–º–±—É–ª –°–∏–¥–µ"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞","–°—Ç–∞–º–±—É–ª –°—ñ–¥–µ"]
}
leave_text_choice = {
    'T√ºrk√ße': ["Gec"],
    'English': ["Pass"],
    '–†—É—Å—Å–∫–∏–π': ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"],
}
yes_text = {
    'T√ºrk√ße': ["Evet"],
    'English': ["Yes"],
    '–†—É—Å—Å–∫–∏–π': ["–î–∞"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–¢–∞–∫"],
}
go_back_text = {
    'T√ºrk√ße': ["Geri d√∂n"],
    'English': ["Go back"],
    '–†—É—Å—Å–∫–∏–π': ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"],
}
leave_photo_choice = {
    'T√ºrk√ße': ["Mevcut fotoƒürafƒ± bƒ±rak"],
    'English': ["Leave current photo"],
    '–†—É—Å—Å–∫–∏–π': ["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ"],
}
menu_choice = [
    ["1", "2", "3", "4"],
]
wait_menu_choice = [
    ["1", "2", "3"],
]
like_choice = [
    ["‚ù§Ô∏è", "üíå", "üëé", "üí§"],
]
like_or_not_choice = [
    ["‚ù§Ô∏è", "üëé"],
]
report_user_choice = [
    ["1üîû","2üíä","3üí∞","4ü¶®","9"]
]
show_n_not_show_choice = [
    ["1", "2"],
]
show_who_likes_choice = {
    'T√ºrk√ße': ["G√∂ster.","Artƒ±k aramƒ±yorum."],
    'English': ["Show.","Not searching anymore."],
    '–†—É—Å—Å–∫–∏–π': ["–ü–æ–∫–∞–∑–∞—Ç—å.","–ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å."],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–ü–æ–∫–∞–∑–∞—Ç–∏.","–ù–µ —Ö–æ—á—É –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–≥–æ –¥–∏–≤–∏—Ç–∏—Å—è."],
}
pay_choice = {
    'T√ºrk√ße': ["1 Aylƒ±k", "6 Aylƒ±k", "1 Yƒ±llƒ±k", "Geri d√∂n"],
    'English': ["1 Month", "6 Months", "1 Year","Go back"],
    '–†—É—Å—Å–∫–∏–π': ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["1 –º—ñ—Å—è—Ü—å", "6 –º—ñ—Å—è—Ü—ñ–≤", "1 —Ä—ñ–∫", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"]
}
show_profiles = {
    'T√ºrk√ße': ["Profilleri g√∂r√ºnt√ºle."],
    'English': ["View profiles."],
    '–†—É—Å—Å–∫–∏–π': ["–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã."],
    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': ["–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."],
}
language_options =[
    ["üá¨üáß English"],["üáπüá∑ T√ºrk√ße"],["üá∑üá∫ –†—É—Å—Å–∫–∏–π"],["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]
]
language_choice_markup = ReplyKeyboardMarkup(language_options)
lang = {}
daily_user_id = {}
spams = {}
msgs = 7 # Messages in
max = 2 # Seconds
ban = 5 # Seconds

menu_markup = ReplyKeyboardMarkup(menu_choice, resize_keyboard=True, one_time_keyboard=True)
report_markup = ReplyKeyboardMarkup(report_user_choice,resize_keyboard=True, one_time_keyboard=True)

like_markup = ReplyKeyboardMarkup(like_choice, resize_keyboard=True, one_time_keyboard=True)

like_or_not_markup = ReplyKeyboardMarkup(like_or_not_choice, resize_keyboard=True, one_time_keyboard=True)

show_n_not_show_markup = ReplyKeyboardMarkup(show_n_not_show_choice, resize_keyboard=True, one_time_keyboard=True)

wait_menu_markup = ReplyKeyboardMarkup(wait_menu_choice, resize_keyboard=True, one_time_keyboard=True)

def is_spam(user_id):
    try:
        usr = spams[user_id]
        usr["messages"] += 1
    except:
        spams[user_id] = {"next_time": int(tm.time()) + max, "messages": 1, "banned": 0}
        usr = spams[user_id]
    if usr["banned"] >= int(tm.time()):
        return True
    else:
        if usr["next_time"] >= int(tm.time()):
            if usr["messages"] >= msgs:
                spams[user_id]["banned"] = tm.time() + ban
                # text = """You're banned for {} minutes""".format(ban/60)
                # bot.send_message(user_id, text)
                # User is banned! alert him...
                return True
        else:
            spams[user_id]["messages"] = 1
            spams[user_id]["next_time"] = int(tm.time()) + max
    return False


async def check_user_state(update: Update, context:CallbackContext):
    chat_id = update.effective_chat.id
    user_id = context.user_data.get(update.effective_user.id,chat_id)
    context.user_data['user_id'] = user_id
    daily_user_id[user_id] = context.user_data.get('user_id')
    await language_control(context)
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT Language FROM Users WHERE PersonID = %s",
        (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    if result == ('',):
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM Users WHERE PersonID = %s AND UserName IS NOT NULL AND Age IS NOT NULL AND Gender IS NOT NULL AND Looking IS NOT NULL AND City IS NOT NULL AND Bio IS NOT NULL AND Photo IS NOT NULL AND IsActive = 1",
            (user_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        user_exists = result[0] > 0
        if user_exists:
            await context.bot.send_message(user_id,'Please select your language:', reply_markup=language_choice_markup)
            return LANGUAGE
        else:
            await context.bot.send_message(user_id,'Please select your language:', reply_markup=language_choice_markup)
            return NAME


    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) FROM Users WHERE PersonID = %s AND UserName IS NOT NULL AND Age IS NOT NULL AND Gender IS NOT NULL AND Looking IS NOT NULL AND City IS NOT NULL AND Bio IS NOT NULL AND Photo IS NOT NULL AND IsActive = 1",
        (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) FROM Users WHERE PersonID = %s AND UserName IS NOT NULL AND Age IS NOT NULL AND Gender IS NOT NULL AND Looking IS NOT NULL AND City IS NOT NULL AND Bio IS NOT NULL AND Photo IS NOT NULL AND IsActive = 0",
        (user_id,))
    result_is_not_active = cursor.fetchone()
    cursor.close()
    conn.close()

    user_exists = result[0] > 0
    user_exists_is_not_active = result_is_not_active[0] > 0
    if user_exists:
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT UserName, Age, City, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        user_name, user_age, user_city, user_bio, user_photo, user_premium = result
        cursor.close()
        conn.close()
        message_text = f"{user_name}, {user_age}, {user_city}, {user_bio if user_bio is not None else 'None'} {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
        your_profile_messages = {
            'T√ºrk√ße': f"Profiliniz:",
            'English': f"Your profile:",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        }
        your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                         f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(your_profile_message)
        await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}", caption=message_text)
        profile_messages = {
            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                      f"3. Biografimi d√ºzenle.\n"
                      f"4. Profilleri G√∂rmeye Ba≈üla.",
            'English': f"1. Edit My Profile.\n"
                       f"2. Change My Profile Picture.\n"
                       f"3. Edit My Bio.\n"
                       f"4. Start Viewing Profiles.",
            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                         f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                         f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                         f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
        }
        profile_message = profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await context.bot.send_message(user_id,profile_message, reply_markup=menu_markup)

        return MENU_EXE
    elif user_exists_is_not_active:
        last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        if last_mes == "Profilleri g√∂r√ºnt√ºle." or last_mes == "View profiles." or last_mes == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã." or last_mes == "–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏.":
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET IsActive = 1 WHERE PersonID = %s", (user_id,))
            cursor.close()
            conn.close()
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT UserName, Age, City, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
            result = cursor.fetchone()
            user_name, user_age, user_city, user_bio, user_photo, user_premium = result
            cursor.close()
            conn.close()
            message_text = f"{user_name}, {user_age}, {user_city}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
            your_profile_messages = {
                'T√ºrk√ße': f"Profiliniz:",
                'English': f"Your profile:",
                '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
            }
            your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(your_profile_message)
            await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}",
                                             caption=message_text)
            profile_messages = {
                'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                          f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                          f"3. Biografimi d√ºzenle.\n"
                          f"4. Profilleri G√∂rmeye Ba≈üla.",
                'English': f"1. Edit My Profile.\n"
                           f"2. Change My Profile Picture.\n"
                           f"3. Edit My Bio.\n"
                           f"4. Start Viewing Profiles.",
                '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                           f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                           f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                           f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                              f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                              f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                              f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
            }
            profile_message = profile_messages.get(lang.get(user_id, 0),
                                                   f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(profile_message, reply_markup=menu_markup)

            return MENU_EXE
        else:
            show_profiles_markup = show_profiles.get(lang.get(user_id, 0))
            show_profiles_markup = ReplyKeyboardMarkup([show_profiles_markup], resize_keyboard=True,
                                                       one_time_keyboard=True)
            wrong_value_messages = {
                'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
                'English': f"You entered an incorrect value!",
                '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
            }
            wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0),
                                                           f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(wrong_value_message,reply_markup=show_profiles_markup)
            end_messages = {
                'T√ºrk√ße': f"Umarƒ±m benim yardƒ±mƒ±mla biriyle tanƒ±≈ümƒ±≈üsƒ±nƒ±zdƒ±r!\nSohbet etmekten her zaman mutluluk duyarƒ±m. Sƒ±kƒ±lƒ±rsanƒ±z bana mesaj atƒ±n - sizin i√ßin √∂zel birini bulacaƒüƒ±m.\n1. Profilleri g√∂r√ºnt√ºle",
                'English': f"Hope you met someone with my help!\nAlways happy to chat. If bored, text me -  I'll find someone special for you.\n1. View profiles",
                '–†—É—Å—Å–∫–∏–π': f"–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞—à–µ–ª –∫–æ–≥–æ-—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ!\n–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å\n1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–∏ –∫–æ–≥–æ—Å—å –∑–Ω–∞–π—à–æ–≤ –∑ –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é!\n–†–∞–¥–∏–π –±—É–≤ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, —è–∫—â–æ –±—É–¥–µ –Ω—É–¥–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–Ω–∞–π–¥–µ–º —Ç–æ–±—ñ –∫–æ–≥–æ—Å—å\n1. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏"
            }
            end_message = end_messages.get(lang.get(user_id, 0),
                                           f"Unsupported language: {lang.get(user_id, 0)}")
            show_profiles_markup = show_profiles.get(lang.get(user_id, 0))
            show_profiles_markup = ReplyKeyboardMarkup([show_profiles_markup], resize_keyboard=True,
                                                       one_time_keyboard=True)
            await update.message.reply_text(end_message, reply_markup=show_profiles_markup)
            return NONEACTIVE
    else:
        await context.bot.send_message(user_id,'Please select your language:', reply_markup=language_choice_markup)
        return NAME
async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (context.user_data.get('user_id'),))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(context.user_data.get('user_id'), "You Are banned!")
        return BANNED
    await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
    return LANGUAGE
async def language(update:Update,context:CallbackContext):
    lange = re.sub(r'^[^\w]+', '', context.user_data.get(context.user_data.get('user_id'), update.message.text))
    if lange != "T√ºrk√ße" and lange != "English" and lange != "–†—É—Å—Å–∫–∏–π" and lange != "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        await update.message.reply_text("Please enter a valid Language")
        return LANGUAGE
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) FROM Users WHERE PersonID = %s AND UserName IS NOT NULL AND Age IS NOT NULL AND Gender IS NOT NULL AND Looking IS NOT NULL AND City IS NOT NULL AND Bio IS NOT NULL AND Photo IS NOT NULL AND IsActive = 1",
        (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    user_exists = result[0] > 0
    await language_control(context)
    if user_exists:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Users SET Language = %s, IsActive = %s WHERE PersonID = %s", (lange, 1, user_id))
        cursor.close()
        conn.close()
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT UserName, Age, City, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        user_name, user_age, user_city, user_bio, user_photo, user_premium = result
        cursor.close()
        conn.close()
        message_text = f"{user_name}, {user_age}, {user_city}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
        your_profile_messages = {
            'T√ºrk√ße': f"Profiliniz:",
            'English': f"Your profile:",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        }
        your_profile_message = your_profile_messages.get(lange, f"Unsupported language: {lang}")
        await context.bot.send_message(user_id,your_profile_message)
        await context.bot.send_photo(user_id,f"{user_photo if user_photo is not None else 'None'}",caption=message_text)
        profile_messages = {
            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                      f"3. Biografimi d√ºzenle.\n"
                      f"4. Profilleri G√∂rmeye Ba≈üla.",
            'English': f"1. Edit My Profile.\n"
                       f"2. Change My Profile Picture.\n"
                       f"3. Edit My Bio.\n"
                       f"4. Start Viewing Profiles.",
            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                         f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                         f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                         f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
        }

        profile_message = profile_messages.get(lange, f"Unsupported language: {lange}")
        await context.bot.send_message(user_id,profile_message, reply_markup=menu_markup)
        return MENU_EXE
    else:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT PersonID FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        if result:
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET Language = %s, IsActive = %s WHERE PersonID = %s", (lange, 1, user_id))
            cursor.close()
            conn.close()
        else:
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("INSERT INTO Users (PersonID, Language,IsActive) VALUES (%s, %s,%s)", (user_id, lange, 1))
            cursor.close()
            conn.close()
        messages = {
            'T√ºrk√ße': f"Merhaba {Bot_UserName}'a Ho≈ügeldiniz! Ba≈ülamadan √∂nce, Bana isminizi s√∂yleyebilirmisiniz...",
            'English': f"Hello! Welcome to {Bot_UserName}! Before we start, can you tell me your name?",
            '–†—É—Å—Å–∫–∏–π': f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {Bot_UserName}! –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ —Å–≤–æ–µ –∏–º—è?",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ {Bot_UserName}! –ü–µ—Ä—à –Ω—ñ–∂ –º–∏ –ø–æ—á–Ω–µ–º–æ, –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—ñ —Å–≤–æ—î —ñ–º'—è?",
        }
        message = messages.get(lange, f"Unsupported language: {lange}")
        await update.message.reply_text(message)
        return AGE


async def set_name(update:Update,context:CallbackContext):
    lang = re.sub(r'^[^\w]+', '', context.user_data.get(context.user_data.get('user_id'), update.message.text))
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT PersonID FROM Users WHERE PersonID = %s", (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    if result:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Users SET Language = %s, IsActive = %s WHERE PersonID = %s", (lang, 1, user_id))
        cursor.close()
        conn.close()
    else:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Users (PersonID, Language,IsActive) VALUES (%s, %s,%s)", (user_id, lang, 1))
        cursor.close()
        conn.close()
    messages = {
        'T√ºrk√ße': f"Merhaba {Bot_UserName}'a Ho≈ügeldiniz! Ba≈ülamadan √∂nce, Bana isminizi s√∂yleyebilirmisiniz...",
        'English': f"Hello! Welcome to {Bot_UserName}! Before we start, can you tell me your name?",
        '–†—É—Å—Å–∫–∏–π': f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {Bot_UserName}! –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ —Å–≤–æ–µ –∏–º—è?",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ {Bot_UserName}! –ü–µ—Ä—à –Ω—ñ–∂ –º–∏ –ø–æ—á–Ω–µ–º–æ, –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—ñ —Å–≤–æ—î —ñ–º'—è?",
    }
    message = messages.get(lang, f"Unsupported language: {lang}")
    await update.message.reply_text(message)
    return AGE
async def start_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    daily_user_id[user_id] = user_id
    await update.message.reply_text(
            f"Merhaba {Bot_UserName}'a Ho≈ügeldiniz! Ba≈ülamadan √∂nce, Bana isminizi s√∂yleyebilirmisiniz...")
    return AGE


async def set_age(update: Update, context: CallbackContext):
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (context.user_data.get('user_id'),))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(context.user_data.get('user_id'), "You Are banned!")
        return BANNED
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    elif re.search(r'\d|\W|\s', context.user_data.get(context.user_data.get('user_id'), update.message.text)):
        await context.bot.send_message(context.user_data.get('user_id'), "L√ºtfen ge√ßerli bir isim s√∂yleyin!")
        return AGE
    user_name = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    context.user_data['user_name'] = user_name
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT PersonID FROM Users WHERE PersonID = %s", (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    if result:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Users SET UserName = %s, IsActive = %s WHERE PersonID = %s", (user_name, 1, user_id))
        cursor.close()
        conn.close()
    else:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Users (PersonID, UserName,IsActive) VALUES (%s, %s,%s)", (user_id, user_name, 1))
        cursor.close()
        conn.close()
    await language_control(context)
    messages_first = {
        'T√ºrk√ße': f"Ho≈ügeldin, {user_name}! Ba≈ülamadan √∂nce profilini olu≈üturalƒ±m. \U0001F60B",
        'English': f"Hello, {user_name}! Before we start, let's create your profile. \U0001F60B",
        '–†—É—Å—Å–∫–∏–π': f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å. \U0001F60B",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å, –ø–µ—Ä—à –Ω—ñ–∂ –ø–æ—á–Ω–µ–º–æ. \U0001F60B",
    }
    messages_second = {
        'T√ºrk√ße': f"{user_name}, ya≈üƒ±n ka√ß?",
        'English': f"{user_name}, how old are you?",
        '–†—É—Å—Å–∫–∏–π': f"{user_name}, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"{user_name}, —Å–∫—ñ–ª—å–∫–∏ —Ç–µ–±–µ —Ä–æ–∫—ñ–≤?",
    }
    message_first = messages_first.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    message_second = messages_second.get(lang.get(user_id,0),f"Unsupported language: {lang.get(user_id, 0)}")
    await update.message.reply_text(message_first)
    await update.message.reply_text(message_second)
    return GENDER


async def set_gender(update: Update, context: CallbackContext):
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    markup = gender_choice.get(lang.get(user_id, 0))
    markup = ReplyKeyboardMarkup([markup], resize_keyboard=True, one_time_keyboard=True)
    messages_wrong = {
        'T√ºrk√ße': f"L√ºtfen ge√ßerli bir ya≈ü giriniz!",
        'English': f"Please enter a valid age!",
        '–†—É—Å—Å–∫–∏–π': f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –≤—ñ–∫!",
    }
    messages_wrong_age = {
        'T√ºrk√ße': f"18 ya≈üƒ±ndan k√º√ß√ºkseniz bu bot i√ßerisinde bulunamazsƒ±nƒ±z!!!",
        'English': f"If you are under 18 years of age you cannot be in this bot!!!",
        '–†—É—Å—Å–∫–∏–π': f"–ï—Å–ª–∏ –≤–∞–º –º–µ–Ω—å—à–µ 18 –ª–µ—Ç, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ!!!",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–Ø–∫—â–æ –≤–∞–º –º–µ–Ω—à–µ 18 —Ä–æ–∫—ñ–≤, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É –±–æ—Ç—ñ!!!",
    }
    message_wrong_age = messages_wrong_age.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    message_wrong = messages_wrong.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    user_age = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    context.user_data['user_age'] = user_age
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(user_id, 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    try:
        user_age = int(user_age)
    except ValueError:
        await update.message.reply_text(message_wrong)
        return GENDER
    if user_age < 18:
        await update.message.reply_text(message_wrong_age)
        await update.message.reply_text(message_wrong)
        return GENDER
    elif user_age > 99:
        message = messages_wrong.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(message)
        return GENDER
    else:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Users SET Age = %s WHERE PersonID = %s", (user_age, user_id))
        cursor.close()
        conn.close()
        messages = {
            'T√ºrk√ße': f"Cinsiyetiniz nedir?",
            'English': f"Specify your gender",
            '–†—É—Å—Å–∫–∏–π': f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–µ–ø–µ—Ä –æ–±–µ—Ä–µ–º–æ —Å—Ç–∞—Ç—å",
        }
        message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(message, reply_markup=markup)
        return LOOKING


async def set_looking(update: Update, context: CallbackContext):
    user_gender = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if user_gender == "Male" or user_gender == "–Ø –ø–∞—Ä–µ–Ω—å" or user_gender == "–Ø —Ö–ª–æ–ø–µ—Ü—å":
        user_gender = "Erkek"
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    elif user_gender == "Female" or user_gender == "–Ø –¥–µ–≤—É—à–∫–∞" or user_gender == "–Ø –¥—ñ–≤—á–∏–Ω–∞":
        user_gender = "Kƒ±z"
    context.user_data['user_gender'] = user_gender
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    looking_markup = looking_choice.get(lang.get(user_id, 0))
    looking_markup = ReplyKeyboardMarkup([looking_markup], resize_keyboard=True, one_time_keyboard=True)
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Gender = %s WHERE PersonID = %s", (user_gender, user_id))
    cursor.close()
    conn.close()
    messages = {
        'T√ºrk√ße': f"Kimlerle ilgileniyorsunuz?",
        'English': f"Who are you looking for?",
        '–†—É—Å—Å–∫–∏–π': f"–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–•—Ç–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?",
    }
    message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    await update.message.reply_text(message, reply_markup=looking_markup)
    return CITY


async def set_city(update: Update, context: CallbackContext):
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    user_looking = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if user_looking == "Boys" or user_looking == "–ü–∞—Ä–Ω–∏"or user_looking == "–•–ª–æ–ø—Ü—ñ":
        user_looking = "Erkekler"
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    elif user_looking == "Girls" or user_looking == "–î–µ—É—à–∫–∏" or user_looking == "–î—ñ–≤—á–∞—Ç–∞":
        user_looking = "Kƒ±zlar"
    context.user_data['user_looking'] = user_looking
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    region_markup = region_choice.get(lang.get(user_id, 0))
    region_markup = ReplyKeyboardMarkup([region_markup], resize_keyboard=True, one_time_keyboard=True)
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Looking = %s WHERE PersonID = %s", (user_looking, user_id))
    cursor.close()
    conn.close()
    messages = {
        'T√ºrk√ße': f"Biyografinize eklemem i√ßin kendinizden biraz daha bahsedin.En iyi e≈üle≈ümeleri sizin i√ßin bulacaƒüƒ±m.",
        'English': f"Tell more about yourself. Who are you looking for? What do you want to do? I'll find the best matches.",
        '–†—É—Å—Å–∫–∏–π': f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–æ–±—ñ –∫–æ–º–ø–∞–Ω—ñ—é.",
    }
    message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    leave_current_markup = leave_text_choice.get(lang.get(user_id, 0))
    leave_current_markup = ReplyKeyboardMarkup([leave_current_markup], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(message,reply_markup=leave_current_markup)
    return PHOTO


async def set_bio(update: Update, context: CallbackContext):
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    user_city = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if user_city == "European side" or user_city == "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞" or user_city == "–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞":
        user_city = "Avrupa Yakasƒ±"
    elif user_city == "Istanbul side" or user_city == "–°—Ç–∞–º–±—É–ª –°–∏–¥–µ" or user_city == "–°—Ç–∞–º–±—É–ª –°—ñ–¥–µ":
        user_city = "Istanbul Yakasƒ±"
    context.user_data['user_city'] = user_city
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    leave_current_markup = leave_text_choice.get(lang.get(user_id, 0))
    leave_current_markup = ReplyKeyboardMarkup([leave_current_markup], resize_keyboard=True, one_time_keyboard=True)
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET City = %s WHERE PersonID = %s", (user_city, user_id))
    cursor.close()
    conn.close()
    messages = {
        'T√ºrk√ße': f"Biyografinize eklemem i√ßin kendinizden biraz daha bahsedin.En iyi e≈üle≈ümeleri sizin i√ßin bulacaƒüƒ±m.",
        'English': f"Tell more about yourself. Who are you looking for? What do you want to do? I'll find the best matches.",
        '–†—É—Å—Å–∫–∏–π': f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.",
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–æ–±—ñ –∫–æ–º–ø–∞–Ω—ñ—é.",
    }
    message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
    await update.message.reply_text(message,reply_markup=leave_current_markup)
    return PHOTO


async def set_photo(update: Update, context: CallbackContext):
    await language_control(context)
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    leave_current_photo_markup = leave_photo_choice.get(lang.get(user_id, 0))
    leave_current_photo_markup = ReplyKeyboardMarkup([leave_current_photo_markup], resize_keyboard=True,
                                                     one_time_keyboard=True)
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes == "Gec" or last_mes == "Pass" or last_mes == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" or last_mes == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT Bio FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        if result and result[0] is not None:
            messages = {
                'T√ºrk√ße': f"Diƒüer kullanƒ±cƒ±larƒ±n g√∂rmesi i√ßin fotoƒürafƒ±nƒ±zƒ±üëçg√∂nderin.",
                'English': f"Send your photoüëç for other users to see",
                '–†—É—Å—Å–∫–∏–π': f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æüëç, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ üëç, –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            }
            message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(message,
                                            reply_markup=leave_current_photo_markup)
        else:
            user_id = context.user_data.get('user_id')
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET Bio = %s WHERE PersonID = %s", (".", user_id))
            cursor.close()
            conn.close()
            messages = {
                'T√ºrk√ße': f"Diƒüer kullanƒ±cƒ±larƒ±n g√∂rmesi i√ßin fotoƒürafƒ±nƒ±zƒ±üëçg√∂nderin.",
                'English': f"Send your photoüëç for other users to see",
                '–†—É—Å—Å–∫–∏–π': f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æüëç, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ üëç, –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            }
            message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(message,
                                            reply_markup=leave_current_photo_markup)
        return SAVEPHOTO
    else:
        user_bio = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        context.user_data['user_bio'] = user_bio
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Users SET Bio = %s WHERE PersonID = %s", (user_bio, user_id))
        cursor.close()
        conn.close()
        messages = {
            'T√ºrk√ße': f"Diƒüer kullanƒ±cƒ±larƒ±n g√∂rmesi i√ßin fotoƒürafƒ±nƒ±zƒ±üëçg√∂nderin.",
            'English': f"Send your photoüëç for other users to see",
            '–†—É—Å—Å–∫–∏–π': f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æüëç, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ üëç, –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
        }
        message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(message,
                                        reply_markup=leave_current_photo_markup)
    return SAVEPHOTO


async def save_photo(update: Update, context: CallbackContext):
    await language_control(context)
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT Photo FROM Users WHERE PersonID = %s", (user_id,))
    photo_control = cursor.fetchone()
    cursor.close()
    conn.close()
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes == "Mevcut fotoƒürafƒ± bƒ±rak" or last_mes == "Leave current photo" or last_mes == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"or last_mes == "–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ":
        if photo_control and photo_control[0] is not None:
            messages = {
                'T√ºrk√ße': f"Profiliniz Hazƒ±r Devam etmeye Hazƒ±rmƒ±sƒ±nƒ±z?",
                'English': f"Your profile is ready Are you ready to continue?",
                '–†—É—Å—Å–∫–∏–π': f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ—Ç–æ–≤–∏–π. –ì–æ—Ç–æ–≤—ñ —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ?",
            }
            message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(message, reply_markup=yes_markup)
            return SHOW_PROFILE
        else:
            not_registered_photo_messages = {
                'T√ºrk√ße': f"Kayƒ±tlƒ± fotoƒürafƒ±nƒ±z bulunmamaktadƒ±r l√ºtfen bir fotoƒüraf ekleyin",
                'English': f"You do not have a saved photo, please send me a photo so I can save it to your profile",
                '–†—É—Å—Å–∫–∏–π': f"–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–µ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é, —â–æ–± —è –º—ñ–≥ –∑–±–µ—Ä–µ–≥—Ç–∏ —ó—ó —É —Ç–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ",
            }
            not_registered_photo_message = not_registered_photo_messages.get(lang.get(user_id, 0),
                                                                   f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(not_registered_photo_message)
            return SAVEPHOTO
    else:
        user_id = context.user_data.get('user_id')
        if update.message.photo:

            user_photo = update.message.photo[-1]
            file = await context.bot.get_file(user_photo.file_id)
            max_file_size_mb = 100
            if file.file_size > max_file_size_mb * 1024 * 1024:
                not_valid_size_messages = {
                    'T√ºrk√ße': f"Ge√ßersiz dosya boyutu! Dosya boyutu {max_file_size_mb} MB'dan k√º√ß√ºk olmalƒ±.",
                    'English': f"Invalid file size! File size should be less than {max_file_size_mb} MB.",
                    '–†—É—Å—Å–∫–∏–π': f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞! –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ {max_file_size_mb} –ú–ë.",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É! –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–µ–Ω—à–µ {max_file_size_mb} –ú–ë.",
                }
                not_valid_size_message = not_valid_size_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(not_valid_size_message)
                return SAVEPHOTO
            file_id = user_photo.file_id
            file_url = file.file_path
            photo_url = f"root_folder/user_photos/{user_id}/{user_id}.png"
            os.makedirs(os.path.dirname(photo_url), exist_ok=True)
            response = requests.get(file_url)
            with open(photo_url, 'wb') as file:
                file.write(response.content)
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET Photo = %s WHERE PersonID = %s", (photo_url, user_id))
            cursor.close()
            conn.close()
            ready_messages = {
                'T√ºrk√ße': f"Profiliniz Hazƒ±r Devam etmeye Hazƒ±rmƒ±sƒ±nƒ±z?",
                'English': f"Your profile is ready Are you ready to continue?",
                '–†—É—Å—Å–∫–∏–π': f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ—Ç–æ–≤–∏–π. –ì–æ—Ç–æ–≤—ñ —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ?",
            }
            ready_message = ready_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(ready_message, reply_markup=yes_markup)

            return SHOW_PROFILE
        else:
            not_valid_messages = {
                'T√ºrk√ße': f"Ge√ßersiz bir dosya g√∂nderdiniz!",
                'English': f"You have submitted an invalid file!",
                '–†—É—Å—Å–∫–∏–π': f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–∞–π–ª!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∏ –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Ñ–∞–π–ª!",
            }
            not_valid_message = not_valid_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(not_valid_message)
            return SAVEPHOTO


async def change_bio(update: Update, context: CallbackContext):
    await language_control(context)
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes == "Gec" or last_mes == "Pass" or last_mes == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" or last_mes == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_id = context.user_data.get('user_id')
        ready_messages = {
            'T√ºrk√ße': f"Profiliniz Hazƒ±r Devam etmeye Hazƒ±rmƒ±sƒ±nƒ±z?",
            'English': f"Your profile is ready Are you ready to continue?",
            '–†—É—Å—Å–∫–∏–π': f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ—Ç–æ–≤–∏–π. –ì–æ—Ç–æ–≤—ñ —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ?",
        }
        ready_message = ready_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(ready_message, reply_markup=yes_markup)
    else:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        user_bio = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        context.user_data['user_bio'] = user_bio
        user_id = context.user_data.get('user_id')
        cursor.execute("UPDATE Users SET Bio = %s WHERE PersonID = %s", (user_bio, user_id))
        cursor.close()
        conn.close()
        ready_messages = {
            'T√ºrk√ße': f"Profiliniz Hazƒ±r Devam etmeye Hazƒ±rmƒ±sƒ±nƒ±z?",
            'English': f"Your profile is ready Are you ready to continue?",
            '–†—É—Å—Å–∫–∏–π': f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ—Ç–æ–≤–∏–π. –ì–æ—Ç–æ–≤—ñ —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ?",
        }
        ready_message = ready_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(ready_message, reply_markup=yes_markup)

    return SHOW_PROFILE


async def show_profile(update: Update, context: CallbackContext):
    await language_control(context)
    user_id = update.effective_user.id
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes != "Evet" and last_mes != "Yes" and last_mes != "–î–∞"and last_mes != "–¢–∞–∫" and last_mes != "Geri d√∂n" and last_mes != "Go back" and last_mes != "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" and last_mes != "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥" and last_mes != "/language":
        user_id = context.user_data.get('user_id')
        wrong_value_messages = {
            'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
            'English': f"You entered a wrong value!",
            '–†—É—Å—Å–∫–∏–π': f"–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∏ –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!",
        }
        wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        go_back_text_markup = go_back_text.get(lang.get(user_id, 0))
        go_back_text_markup = ReplyKeyboardMarkup([go_back_text_markup], resize_keyboard=True,
                                                  one_time_keyboard=True)
        await update.message.reply_text(wrong_value_message,reply_markup=go_back_text_markup)
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(context.user_data.get('user_id'), 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    else:
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        user_name, user_age, user_bio, user_photo, user_premium = result
        cursor.close()
        conn.close()
        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
        your_profile_messages = {
            'T√ºrk√ße': f"Profiliniz:",
            'English': f"Your profile:",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        }
        your_profile_message = your_profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(your_profile_message)
        await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}", caption=message_text)
        profile_messages = {
            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                      f"3. Biografimi d√ºzenle.\n"
                      f"4. Profilleri G√∂rmeye Ba≈üla.",
            'English': f"1. Edit My Profile.\n"
                       f"2. Change My Profile Picture.\n"
                       f"3. Edit My Bio.\n"
                       f"4. Start Viewing Profiles.",
            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                         f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                         f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                         f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
        }
        profile_message = profile_messages.get(lang.get(user_id, 0),
                                                       f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(profile_message, reply_markup=menu_markup)

        return MENU_EXE


async def menu_exe(update: Update, context: CallbackContext):
    await language_control(context)
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    user_id = update.effective_user.id
    cursor.execute("SELECT LikeUserID FROM Likes WHERE LikedUserID = %s", (user_id,))
    likes = cursor.fetchall()
    cursor.close()
    conn.close()
    len_likes = len(likes)
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "1":
        current_jobs = context.job_queue.get_jobs_by_name(name="dgc")
        for job in current_jobs:
            job.schedule_removal()
        messages = {
            'T√ºrk√ße': f"ƒ∞sminiz nedir?",
            'English': f"What is your name?",
            '–†—É—Å—Å–∫–∏–π': f"–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        }
        message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(message)
        return AGE
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "2":
        current_jobs = context.job_queue.get_jobs_by_name(name="dgc")
        for job in current_jobs:
            job.schedule_removal()
        messages = {
            'T√ºrk√ße': f"Diƒüer kullanƒ±cƒ±larƒ±n g√∂rmesi i√ßin fotoƒürafƒ±nƒ±zƒ±üëçg√∂nderin.",
            'English': f"Send your photoüëç for other users to see",
            '–†—É—Å—Å–∫–∏–π': f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æüëç, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ üëç, –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
        }
        message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        leave_current_photo_markup = leave_photo_choice.get(lang.get(user_id, 0))
        leave_current_photo_markup = ReplyKeyboardMarkup([leave_current_photo_markup], resize_keyboard=True,
                                                         one_time_keyboard=True)
        await update.message.reply_text(message,reply_markup=leave_current_photo_markup)
        return SAVEPHOTO
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "3":
        current_jobs = context.job_queue.get_jobs_by_name(name="dgc")
        for job in current_jobs:
            job.schedule_removal()
        messages = {
            'T√ºrk√ße': f"Biyografinize eklemem i√ßin kendinizden biraz daha bahsedin.En iyi e≈üle≈ümeleri sizin i√ßin bulacaƒüƒ±m.",
            'English': f"Tell more about yourself. Who are you looking for? What do you want to do? I'll find the best matches.",
            '–†—É—Å—Å–∫–∏–π': f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–æ–±—ñ –∫–æ–º–ø–∞–Ω—ñ—é.",
        }
        message = messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        leave_current_markup = leave_text_choice.get(lang.get(user_id, 0))
        leave_current_markup = ReplyKeyboardMarkup([leave_current_markup], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(message,reply_markup=leave_current_markup)
        return CHANGEBIO
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "4":
        ready_to_messages = {
            'T√ºrk√ße': f"Profilleri G√∂rmeye Hazƒ±rmƒ±sƒ±n? ü•∞",
            'English': f"Are You Ready to See Profiles? ü•∞",
            '–†—É—Å—Å–∫–∏–π': f"–ì–æ—Ç–æ–≤—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∫–µ—Ç—ã? ü•∞",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ì–æ—Ç–æ–≤—ñ –ø–æ–±–∞—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç–∏? ü•∞",
        }
        ready_to_message = ready_to_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        yes_markup = yes_text.get(lang.get(user_id, 0))
        yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(ready_to_message, reply_markup=yes_markup)
        is_spam(update.effective_user.id)
        return MATCHING
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "G√∂ster." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Show." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ü–æ–∫–∞–∑–∞—Ç—å." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ü–æ–∫–∞–∑–∞—Ç–∏." and len_likes> 0:
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT PersonID, UserName, Age, Bio, Photo FROM Users JOIN Likes ON PersonID = LikeUserID WHERE LikedUserID = %s",
            (user_id,))
        liked_users = cursor.fetchall()[0]
        cursor.close()
        conn.close()
        userid, user_name, user_age, user_bio, user_photo = liked_users
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT MesToPerson FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s",
            (userid, user_id))
        mes_to_person_result = cursor.fetchone()
        mes_to_person = mes_to_person_result[0]
        cursor.close()
        conn.close()
        if mes_to_person is not None and mes_to_person != 'None':
            message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}\n\n\n Bu ki≈üinin size bir mesajƒ± var:\n {mes_to_person}"
        else:
            message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
        await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_or_not_markup)
        return SHOW_WHO_LIKES
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Artƒ±k aramƒ±yorum." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Not searching anymore." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ù–µ —Ö–æ—á—É –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–≥–æ –¥–∏–≤–∏—Ç–∏—Å—è." and len_likes> 0:
        freeze_profile_messages = {
            'T√ºrk√ße': f"Hesabƒ±nƒ±zƒ± dondurmak istiyormusnuz?\n\n\n1. Evet\n2. Geri d√∂n",
            'English': f"You won't know who likes you then... Sure about deactivating?\n\n\n1. Yes, deactivate my profile please.\n2. No, I want to see my matches.",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n2. –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ —Ç–∏ –Ω–µ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ –∫–æ–º—É—Å—å –ø–æ–¥–æ–±–∞—î—à—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –¢–∞–∫, –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É..\n2. –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥."
        }
        freeze_profile_message = freeze_profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(freeze_profile_message,
                                        reply_markup=show_n_not_show_markup)
        return DEACTIVE
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(user_id, 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    elif context.user_data.get(context.user_data.get('user_id'),update.message.text) == "/report":
        no_report_here_messages = {
            'T√ºrk√ße': f"Sadece profiller ≈üikayet edeblirsiniz.",
            'English': f"Works only on someone's profile",
            '–†—É—Å—Å–∫–∏–π': f"–ñ–∞–ª–æ–±—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç—ã",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–°–∫–∞—Ä–≥—É –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç"
        }
        no_report_here_message = no_report_here_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(no_report_here_message)
    else:
        wrong_value_messages = {
            'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
            'English': f"You entered an incorrect value!",
            '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
        }
        wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(wrong_value_message,reply_markup=menu_markup)
        return MENU_EXE

async def wait_menu_exe(update: Update, context: CallbackContext):
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "1":
        ready_to_messages = {
            'T√ºrk√ße': f"Profilleri G√∂rmeye Hazƒ±rmƒ±sƒ±n? ü•∞",
            'English': f"Are You Ready to See Profiles? ü•∞",
            '–†—É—Å—Å–∫–∏–π': f"–ì–æ—Ç–æ–≤—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∫–µ—Ç—ã? ü•∞",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ì–æ—Ç–æ–≤—ñ –ø–æ–±–∞—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç–∏? ü•∞",
        }
        ready_to_message = ready_to_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(ready_to_message, reply_markup=yes_markup)
        return MATCHING
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "2":
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        user_name, user_age, user_bio, user_photo, user_premium = result
        cursor.close()
        conn.close()
        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
        your_profile_messages = {
            'T√ºrk√ße':f"Profiliniz:",
            'English':f"Your profile:",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        }
        your_profile_message = your_profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(your_profile_message)
        await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}", caption=message_text)
        profile_messages = {
            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                      f"3. Biografimi d√ºzenle.\n"
                      f"4. Profilleri G√∂rmeye Ba≈üla.",
            'English': f"1. Edit My Profile.\n"
                       f"2. Change My Profile Picture.\n"
                       f"3. Edit My Bio.\n"
                       f"4. Start Viewing Profiles.",
            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                         f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                         f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                         f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
        }
        profile_message = profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(profile_message, reply_markup=menu_markup)

        return MENU_EXE
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "3":
        freeze_profile_messages = {
            'T√ºrk√ße': f"Hesabƒ±nƒ±zƒ± dondurmak istiyormusnuz?\n\n\n1. Evet\n2. Geri d√∂n",
            'English': f"You won't know who likes you then... Sure about deactivating?\n\n\n1. Yes, deactivate my profile please.\n2. No, I want to see my matches.",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n2. –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ —Ç–∏ –Ω–µ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ –∫–æ–º—É—Å—å –ø–æ–¥–æ–±–∞—î—à—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –¢–∞–∫, –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É..\n2. –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥."
        }
        freeze_profile_message = freeze_profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(freeze_profile_message,
                                        reply_markup=show_n_not_show_markup)
        return DEACTIVE
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(user_id, 'Please select your language:', reply_markup=language_choice_markup)
        return LANGUAGE
    elif context.user_data.get(context.user_data.get('user_id'),update.message.text) == "/report":
        no_report_here_messages = {
            'T√ºrk√ße': f"Sadece profiller ≈üikayet edeblirsiniz.",
            'English': f"Works only on someone's profile",
            '–†—É—Å—Å–∫–∏–π': f"–ñ–∞–ª–æ–±—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç—ã",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–°–∫–∞—Ä–≥—É –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç"
        }
        no_report_here_message = no_report_here_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(no_report_here_message)
    else:
        wrong_value_messages = {
            'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
            'English': f"You entered an incorrect value!",
            '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
        }
        wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(wrong_value_message,reply_markup=wait_menu_markup)
        return WAIT_MENU_EXE

user_last_len = {}

async def matching(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if is_spam(update.effective_user.id):
        await update.message.reply_text("√áok hƒ±zlƒ± mesaj g√∂nderiyorsunuz. Ge√ßici olarak engellendiniz.")
        return MATCHING
    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "/language":
        await context.bot.send_message(update.effective_user.id, 'Please select your language:',
                                       reply_markup=language_choice_markup)
        return LANGUAGE
    else:
        current_jobs = context.job_queue.get_jobs_by_name(name="dgc")
        for job in current_jobs:
            job.schedule_removal()
        async def check_who_likes(context: CallbackContext):
            try:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                user_id = update.effective_user.id
                cursor.execute("SELECT LikeUserID FROM Likes WHERE LikedUserID = %s", (user_id,))
                likes = cursor.fetchall()
                cursor.close()
                conn.close()
                len_likes = len(likes)
                last_len = user_last_len.get(user_id, 0)
                if len_likes > 0 and last_len != len_likes:
                    user_last_len[user_id] = len_likes
                    someone_liked_messages = {
                        'T√ºrk√ße': f"{len_likes} ki≈üi sizi beƒüendi.Bakmak istermisin?\n\n\n1. G√∂ster.\n2. Artƒ±k aramƒ±yorum.",
                        'English': f"{len_likes} person liked you. Have a look?\n\n\n1. Show.\n2. Not searching anymore.",
                        '–†—É—Å—Å–∫–∏–π': f"–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è {len_likes} —á–µ–ª–æ–≤–µ–∫—É\n\n\n1. –ü–æ–∫–∞–∑–∞—Ç—å.\n2. –ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å.",
                        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è {len_likes} –ª—é–¥–∏–Ω—ñ\n\n\n1. –ü–æ–∫–∞–∑–∞—Ç–∏.\n2. –ù–µ —Ö–æ—á—É –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–≥–æ –¥–∏–≤–∏—Ç–∏—Å—è."
                    }
                    show_who_likes_markup = show_who_likes_choice.get(lang.get(user_id, 0))
                    show_who_likes_markup = ReplyKeyboardMarkup([show_who_likes_markup], resize_keyboard=True,one_time_keyboard=True)
                    someone_liked_message = someone_liked_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                    await update.message.reply_text(someone_liked_message,reply_markup=show_who_likes_markup)
                    context.job.data = True
            except Exception as e:
                pass
            finally:
                await asyncio.sleep(1)
        job = context.job_queue.run_repeating(check_who_likes, interval=10, first=0, data=None,name="dgc")
        await job.run(context.application)
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT LikeUserID FROM Likes WHERE LikedUserID = %s", (user_id,))
        likes = cursor.fetchall()
        cursor.close()
        conn.close()
        len_likes = len(likes)
        if len_likes>0:
            current_jobs = context.job_queue.get_jobs_by_name(name="dgc")
            for job in current_jobs:
                job.schedule_removal()
            if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "G√∂ster." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Show." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ü–æ–∫–∞–∑–∞—Ç—å." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ü–æ–∫–∞–∑–∞—Ç–∏.":
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT PersonID, UserName, Age, Bio, Photo FROM Users JOIN Likes ON PersonID = LikeUserID WHERE LikedUserID = %s",
                    (user_id,))
                liked_users = cursor.fetchall()[0]
                userid, user_name, user_age, user_bio, user_photo = liked_users
                cursor.close()
                conn.close()
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT MesToPerson FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s",
                    (userid, user_id))
                mes_to_person_result = cursor.fetchone()
                mes_to_person = mes_to_person_result[0]
                cursor.close()
                conn.close()
                if mes_to_person is not None and mes_to_person != 'None':
                    message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}\n\n\n Bu ki≈üinin size bir mesajƒ± var:\n {mes_to_person}"
                    await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_or_not_markup)
                    return SHOW_WHO_LIKES
                else:
                    message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
                    await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_or_not_markup)
                    return SHOW_WHO_LIKES

            elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Artƒ±k aramƒ±yorum." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Not searching anymore." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å." or context.user_data.get(context.user_data.get('user_id'), update.message.text) == "–ù–µ —Ö–æ—á—É –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–≥–æ –¥–∏–≤–∏—Ç–∏—Å—è.":
                freeze_profile_messages = {
                    'T√ºrk√ße': f"Hesabƒ±nƒ±zƒ± dondurmak istiyormusnuz?\n\n\n1. Evet\n2. Geri d√∂n",
                    'English': f"You won't know who likes you then... Sure about deactivating?\n\n\n1. Yes, deactivate my profile please.\n2. No, I want to see my matches.",
                    '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n2. –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ —Ç–∏ –Ω–µ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ –∫–æ–º—É—Å—å –ø–æ–¥–æ–±–∞—î—à—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n\n1. –¢–∞–∫, –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É..\n2. –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥."
                }
                freeze_profile_message = freeze_profile_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(freeze_profile_message,reply_markup=show_n_not_show_markup)
                user_last_len[user_id] = 0
                return DEACTIVE
        else:
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT DailyViewCount FROM Users WHERE PersonID = %s", (user_id,))
            view_count = cursor.fetchone()
            cursor.close()
            conn.close()
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT Premium FROM Users WHERE PersonID = %s", (context.user_data.get('user_id'),))
            user_premium_status = cursor.fetchone()[0]
            cursor.close()
            conn.close()
            if view_count and view_count[0] > 0 or user_premium_status > 0:
                try:
                    liked_user_id = context.user_data.get('liked_user_id')
                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    user_id = context.user_data.get('user_id')
                    cursor.execute("SELECT UserName, Age, Bio, Photo FROM Users WHERE PersonID = %s", (user_id,))
                    result = cursor.fetchone()
                    cursor.close()
                    conn.close()
                    user_name, user_age, user_bio, user_photo = result
                    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
                    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "‚ù§Ô∏è":
                        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
                        conn = connection_pool.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("SELECT * FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s", (user_id, liked_user_id))
                        existing_like = cursor.fetchone()
                        cursor.close()
                        conn.close()
                        if existing_like:
                            pass
                        else:
                            conn = connection_pool.get_connection()
                            cursor = conn.cursor()
                            cursor.execute("INSERT INTO Likes (LikeUserID, LikedUserID) VALUES (%s, %s)", (user_id, liked_user_id))
                            cursor.close()
                            conn.close()
                    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üíå" and context.user_data.get('flag_user') != None:
                        mes_person_id = liked_user_id
                        context.user_data['mes_person_id'] = mes_person_id
                        return SAVE_MESSAGE
                    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üëé":
                        pass
                    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üí§":
                        return WAIT_MENU_EXE
                    elif last_mes == "/language":
                        await context.bot.send_message(user_id, 'Please select your language:',
                                                       reply_markup=language_choice_markup)
                        return LANGUAGE
                    elif last_mes == "/report" and context.user_data.get('flag_user') != None:
                        return REPORT_USER
                    elif last_mes == "Evet" or last_mes == "Yes" or last_mes == "–î–∞" or last_mes == "–¢–∞–∫":
                        pass
                    elif last_mes == "Geri d√∂n" or last_mes == "Go back" or last_mes == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" or last_mes == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥":
                        conn = connection_pool.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s",
                                       (user_id,))
                        result = cursor.fetchone()
                        user_name, user_age, user_bio, user_photo, user_premium = result
                        cursor.close()
                        conn.close()
                        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
                        your_profile_messages = {
                            'T√ºrk√ße': f"Profiliniz:",
                            'English': f"Your profile:",
                            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
                        }
                        your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                                         f"Unsupported language: {lang.get(user_id, 0)}")
                        await update.message.reply_text(your_profile_message)
                        await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}",
                                                         caption=message_text)
                        profile_messages = {
                            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                                      f"3. Biografimi d√ºzenle.\n"
                                      f"4. Profilleri G√∂rmeye Ba≈üla.",
                            'English': f"1. Edit My Profile.\n"
                                       f"2. Change My Profile Picture.\n"
                                       f"3. Edit My Bio.\n"
                                       f"4. Start Viewing Profiles.",
                            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                                          f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                                          f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                                          f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
                        }
                        profile_message = profile_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")
                        await update.message.reply_text(profile_message, reply_markup=menu_markup)

                        return MENU_EXE
                    else:
                        no_option_messages = {
                            'T√ºrk√ße': f"B√∂yle bir se√ßenek yok",
                            'English': f"There is no such option.",
                            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç.",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫–æ—ó –æ–ø—Ü—ñ—ó –Ω–µ–º–∞—î."
                        }
                        no_option_message = no_option_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                        await update.message.reply_text(no_option_message,reply_markup=like_markup)
                        return MATCHING

                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    user_id = context.user_data.get('user_id')
                    cursor.execute("SELECT Looking, Gender FROM Users WHERE PersonID = %s", (user_id,))
                    looking, user_gender = cursor.fetchone()
                    cursor.close()
                    conn.close()
                    if looking == "Kƒ±zlar" and user_gender == "Erkek":
                        user_looking = "Erkekler"
                        match_gender = "Kƒ±z"
                    elif looking == "Erkekler" and user_gender == "Kƒ±z":
                        user_looking = "Kƒ±zlar"
                        match_gender = "Erkek"
                    elif looking == "Kƒ±zlar" and user_gender == "Kƒ±z":
                        user_looking = "Kƒ±zlar"
                        match_gender = "Kƒ±z"
                    elif looking == "Erkekler" and user_gender == "Erkek":
                        user_looking = "Erkekler"
                        match_gender = "Erkek"
                    else:
                        user_looking = "Kƒ±zlar"
                        user_gender = "Erkek"
                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    cursor.execute("SELECT Age FROM Users WHERE PersonID = %s AND Bio IS NOT NULL AND Photo IS NOT NULL", (context.user_data.get('user_id'),))
                    my_user_age = cursor.fetchone()[0]
                    cursor.close()
                    conn.close()
                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT COUNT(*) FROM Users WHERE Gender = %s AND Looking = %s AND IsActive = 1 AND PersonID NOT IN (SELECT LikedUserID FROM Likes WHERE LikeUserID = %s) AND Age BETWEEN %s AND %s AND PersonID != %s AND Bio IS NOT NULL AND Photo IS NOT NULL",
                        (match_gender, user_looking, user_id, my_user_age - 5, my_user_age + 5,user_id)
                    )
                    total_users = cursor.fetchone()[0]
                    cursor.close()
                    conn.close()
                    if total_users == None or total_users == "None" or total_users == 0:
                        limit_messages = {
                            'T√ºrk√ße': f"Kriterlerinize uygun birini ≈üu anda bulamadƒ±m. L√ºtfen bir s√ºre sonra gelip tekrar deneyin.‚ò∫",
                            'English': f"Unable to find someone that meets your criteria at the moment. Please come back later and try again.‚ò∫",
                            '–†—É—Å—Å–∫–∏–π': f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.‚ò∫",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ù–∞—Ä–∞–∑—ñ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –æ—Å–æ–±—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.‚ò∫"
                        }
                        limit_message = limit_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                        go_back_text_markup = go_back_text.get(lang.get(user_id, 0))
                        go_back_text_markup = ReplyKeyboardMarkup([go_back_text_markup], resize_keyboard=True,
                                                                  one_time_keyboard=True)
                        await update.message.reply_text(limit_message,reply_markup=go_back_text_markup)
                        return SHOW_PROFILE
                    random_index = random.randint(0, total_users - 1)
                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    sql_query = (
                        "SELECT PersonID, UserName, Age, Bio, Photo FROM Users WHERE Gender = %s AND Looking = %s AND IsActive = 1 AND PersonID NOT IN (SELECT LikedUserID FROM Likes WHERE LikeUserID = %s) AND Age BETWEEN %s AND %s AND Bio IS NOT NULL AND Photo IS NOT NULL LIMIT 1 OFFSET %s"
                    )
                    cursor.execute(sql_query,
                                   (match_gender, user_looking, user_id, my_user_age - 5, my_user_age + 5, random_index))
                    random_user = cursor.fetchone()
                    cursor.close()
                    conn.close()
                    userid, user_name, user_age, user_bio, user_photo = random_user
                    liked_user_id = userid
                    context.user_data['liked_user_id'] = liked_user_id
                    flag_user = userid
                    context.user_data['flag_user'] = flag_user
                    message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
                    await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_markup)
                except Exception as e:
                    print(e)
                    pass
                finally:
                    conn = connection_pool.get_connection()
                    cursor = conn.cursor()
                    cursor.execute("SELECT Premium FROM Users WHERE PersonID = %s",
                                   (user_id,))
                    result = cursor.fetchone()
                    user_premium = result[0] if result else 0
                    cursor.close()
                    conn.close()
                    if int(user_premium) > 0:
                        pass
                    else:
                        conn = connection_pool.get_connection()
                        cursor = conn.cursor()
                        cursor.execute("UPDATE Users SET DailyViewCount = DailyViewCount - 1 WHERE PersonID = %s",(user_id,))
                        cursor.close()
                        conn.close()
                    if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üí§":
                        wait_message_messages = {
                            'T√ºrk√ße': f"Biri sizi g√∂rene kadar bekleyin.",
                            'English': f"Wait until someone sees you.",
                            '–†—É—Å—Å–∫–∏–π': f"–ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü–æ—á–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Ö—Ç–æ—Å—å –ø–æ–±–∞—á–∏—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É",
                        }
                        wait_exe_messages = {
                            'T√ºrk√ße': f"1.Profilleri G√∂rmeye ba≈üla.\n"
                                      f"2.Profilim.\n"
                                      f"3.Artƒ±k aramƒ±yorum.\n",
                            'English': f"1.View profiles.\n"
                                      f"2.My profile.\n"
                                      f"3.Not searching anymore.\n",
                            '–†—É—Å—Å–∫–∏–π': f"1.–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n"
                                       f"2.–ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n"
                                       f"3.–Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1.–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏.\n"
                                       f"2.–ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n"
                                       f"3.–Ø –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω—ñ–∫–æ–≥–æ —à—É–∫–∞—Ç–∏.\n",
                        }
                        wait_exe_message = wait_exe_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                        wait_message_message = wait_message_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                        await update.message.reply_text(wait_message_message)
                        await update.message.reply_text(wait_exe_message, reply_markup=wait_menu_markup)
                        return WAIT_MENU_EXE
                    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üíå" and context.user_data.get('flag_user') != None:
                        flag_user = None
                        context.user_data['flag_user'] = flag_user
                        write_message_messages = {
                            'T√ºrk√ße': f"G√∂ndermek istediƒüiniz mesajƒ± yazƒ±n...",
                            'English': f"Write a message for this user",
                            '–†—É—Å—Å–∫–∏–π': f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                        }
                        write_message_message = write_message_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                        go_back_text_markup = go_back_text.get(lang.get(user_id, 0))
                        go_back_text_markup = ReplyKeyboardMarkup([go_back_text_markup], resize_keyboard=True,
                                                                  one_time_keyboard=True)
                        await update.message.reply_text(write_message_message,reply_markup=go_back_text_markup)
                        return SAVE_MESSAGE
                    elif context.user_data.get(context.user_data.get('user_id'),update.message.text) == "/report" and context.user_data.get('flag_user') != None:
                        flag_user = None
                        context.user_data['flag_user'] = flag_user
                        rep_person_id = context.user_data.get('liked_user_id')
                        context.user_data['rep_person_id'] = rep_person_id
                        report_user_messages = {
                            'T√ºrk√ße': f"Sebebini belirtin.\n\n"
                                      f"1. üîû Cinsellik materyali.\n"
                                      f"2. üíä Uyu≈üturucu ticareti.\n"
                                      f"3. üí∞ Mal ve hizmet satƒ±≈üƒ±\n"
                                      f"4. ü¶® Diƒüeri.\n"
                                      f"***\n"
                                      f"9.Geri d√∂n.",
                            'English': f"Specify the reason.\n\n"
                                       f"1. üîû Adult material.\n"
                                       f"2. üíä Drug propaganda.\n"
                                       f"3. üí∞ Sale of goods and services.\n"
                                       f"4. ü¶® Others.\n"
                                       f"***\n"
                                       f"9. Go back.",
                            '–†—É—Å—Å–∫–∏–π': f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã\n\n"
                                       f"1. üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n"
                                       f"2. üíä –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤.\n"
                                       f"3. üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.\n"
                                       f"4. ü¶® –î—Ä—É–≥–æ–µ.\n"
                                       f"***\n"
                                       f"9.–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
                            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏\n\n"
                                          f"1. üîû –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö.\n"
                                          f"2. üíä Drug propaganda.\n"
                                          f"3. üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –ø–æ—Å–ª—É–≥.\n"
                                          f"4. ü¶® –Ü–Ω—à–µ.\n"
                                          f"***\n"
                                          f"9. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥.",
                        }
                        report_user_message = report_user_messages.get(lang.get(user_id, 0),
                                                                       f"Unsupported language: {lang.get(user_id, 0)}")
                        await context.bot.send_message(user_id, report_user_message, reply_markup=report_markup)
                        return REPORT_USER
                    elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "Geri d√∂n":
                        return MENU_EXE
                    else:
                        return MATCHING
            else:
                daily_like_messages = {
                    'T√ºrk√ße': f"G√ºnl√ºk beƒüenme limitine ula≈ütƒ±nƒ±z 24 saat sonra tekrar gelin",
                    'English': f"You have reached the daily liking limit. Please come back in 24 hours.",
                    '–†—É—Å—Å–∫–∏–π': f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –¥–æ—Å—è–≥–ª–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –ª–∞–π–∫—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏."
                }
                daily_like_message = daily_like_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                go_back_text_markup = go_back_text.get(lang.get(user_id, 0))
                go_back_text_markup = ReplyKeyboardMarkup([go_back_text_markup], resize_keyboard=True,one_time_keyboard=True)
                await update.message.reply_text(daily_like_message,reply_markup=go_back_text_markup)
                return SHOW_PROFILE

async def save_the_message(update: Update, context: CallbackContext):
    mes_person_id = context.user_data.get('mes_person_id')
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes == "Geri d√∂n" or last_mes == "Go back" or last_mes == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" or last_mes == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥":
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT PersonID,UserName, Age, Bio, Photo FROM Users WHERE PersonID = %s", (mes_person_id,))
        mes_user = cursor.fetchone()
        cursor.close()
        conn.close()
        userid, user_name, user_age, user_bio, user_photo = mes_user
        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
        await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_markup)

        return MATCHING
    else:
        mes_to_person = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        if mes_to_person == 'None' or mes_to_person == None:
            user_id = context.user_data.get('user_id')
            incorrect_value_messages = {
                'T√ºrk√ße': f"Ge√ßersiz bir deƒüer girdiniz!",
                'English': f"You entered an incorrect value!",
                '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
            }
            incorrect_value_message = incorrect_value_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(incorrect_value_message)
            return SAVE_MESSAGE
        user_id = context.user_data.get('user_id')

        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Likes (LikeUserID, LikedUserID,MesToPerson) VALUES (%s, %s,%s)",
                       (user_id, mes_person_id, mes_to_person))
        cursor.close()
        conn.close()
        con_profile_messages = {
            'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
            'English': f"Shall we continue to view profiles? ü•∞",
            '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
        }
        con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                         f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
        return MATCHING
async def report_user(update: Update, context: CallbackContext):
    rep_person_id = context.user_data.get('rep_person_id')
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
    if last_mes == "9":
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT PersonID,UserName, Age, Bio, Photo FROM Users WHERE PersonID = %s", (rep_person_id,))
        mes_user = cursor.fetchone()
        cursor.close()
        conn.close()
        userid, user_name, user_age, user_bio, user_photo = mes_user
        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
        await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_markup)

        return MATCHING
    else:
        mes_to_person = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM Reports WHERE UserID = %s", (rep_person_id,))
        row_count = cursor.fetchone()[0]
        cursor.close()
        conn.close()
        if mes_to_person != '1üîû' and mes_to_person != '2üíä' and mes_to_person != '3üí∞' and mes_to_person != '4ü¶®' and mes_to_person != '9':
            user_id = context.user_data.get('user_id')
            incorrect_value_messages = {
                'T√ºrk√ße': f"Ge√ßersiz bir deƒüer girdiniz!",
                'English': f"You entered an incorrect value!",
                '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
            }
            incorrect_value_message = incorrect_value_messages.get(lang.get(user_id, 0),f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(incorrect_value_message)
            return REPORT_USER
        elif mes_to_person == '1üîû':
            if row_count > 0:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE Reports SET AdultREP = AdultREP + 1 WHERE UserID = %s", (rep_person_id,))
                cursor.close()
                conn.close()
            else:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO Reports (UserID, AdultREP) VALUES (%s, 1)", (rep_person_id,))
                cursor.close()
                conn.close()
            con_profile_messages = {
                'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                'English': f"Shall we continue to view profiles? ü•∞",
                '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
            }
            con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
            return MATCHING
        elif mes_to_person == '2üíä':
            if row_count > 0:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE Reports SET DrugREP = DrugREP + 1 WHERE UserID = %s", (rep_person_id,))
                cursor.close()
                conn.close()
                con_profile_messages = {
                    'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                    'English': f"Shall we continue to view profiles? ü•∞",
                    '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
                }
                con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
                return MATCHING
            else:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO Reports (UserID, DrugREP) VALUES (%s, 1)", (rep_person_id,))
                cursor.close()
                conn.close()
            con_profile_messages = {
                'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                'English': f"Shall we continue to view profiles? ü•∞",
                '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
            }
            con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
            return MATCHING
        elif mes_to_person == '3üí∞':
            if row_count > 0:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE Reports SET SaleREP = SaleREP + 1 WHERE UserID = %s", (rep_person_id,))
                cursor.close()
                conn.close()
                con_profile_messages = {
                    'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                    'English': f"Shall we continue to view profiles? ü•∞",
                    '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
                }
                con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
                return MATCHING
            else:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO Reports (UserID, SaleREP) VALUES (%s, 1)", (rep_person_id,))
                cursor.close()
                conn.close()
            con_profile_messages = {
                'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                'English': f"Shall we continue to view profiles? ü•∞",
                '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
            }
            con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
            return MATCHING
        elif mes_to_person == '4ü¶®':
            if row_count > 0:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE Reports SET OtherREP = OtherREP + 1 WHERE UserID = %s", (rep_person_id,))
                cursor.close()
                conn.close()
                con_profile_messages = {
                    'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                    'English': f"Shall we continue to view profiles? ü•∞",
                    '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
                }
                con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
                return MATCHING
            else:
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO Reports (UserID, OtherREP) VALUES (%s, 1)", (rep_person_id,))
                cursor.close()
                conn.close()
            con_profile_messages = {
                'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                'English': f"Shall we continue to view profiles? ü•∞",
                '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
            }
            con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
            return MATCHING
        elif mes_to_person == '9':
            con_profile_messages = {
                'T√ºrk√ße': f"Profilleri G√∂rmeye devam edelim mi? ü•∞",
                'English': f"Shall we continue to view profiles? ü•∞",
                '–†—É—Å—Å–∫–∏–π': f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π? ü•∞",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß–∏ —Ö–æ—á–µ—Ç–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? ü•∞"
            }
            con_profile_message = con_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(con_profile_message, reply_markup=yes_markup)
            return MATCHING
async def de_active_or_not(update: Update, context: CallbackContext):
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    show_profiles_markup = show_profiles.get(lang.get(user_id, 0))
    show_profiles_markup = ReplyKeyboardMarkup([show_profiles_markup], resize_keyboard=True, one_time_keyboard=True)
    if is_spam(update.effective_user.id):
        await update.message.reply_text("√áok hƒ±zlƒ± mesaj g√∂nderiyorsunuz. Ge√ßici olarak engellendiniz.")
        return DEACTIVE
    else:
        user_id = context.user_data.get('user_id')
        if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "1":
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET IsActive = 0 WHERE PersonID = %s", (user_id,))
            cursor.close()
            conn.close()
            end_messages = {
                'T√ºrk√ße': f"Umarƒ±m benim yardƒ±mƒ±mla biriyle tanƒ±≈ümƒ±≈üsƒ±nƒ±zdƒ±r!\nSohbet etmekten her zaman mutluluk duyarƒ±m. Sƒ±kƒ±lƒ±rsanƒ±z bana mesaj atƒ±n - sizin i√ßin √∂zel birini bulacaƒüƒ±m.\n1. Profilleri g√∂r√ºnt√ºle",
                'English': f"Hope you met someone with my help!\nAlways happy to chat. If bored, text me -  I'll find someone special for you.\n1. View profiles",
                '–†—É—Å—Å–∫–∏–π': f"–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞—à–µ–ª –∫–æ–≥–æ-—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ!\n–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å\n1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–∏ –∫–æ–≥–æ—Å—å –∑–Ω–∞–π—à–æ–≤ –∑ –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é!\n–†–∞–¥–∏–π –±—É–≤ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, —è–∫—â–æ –±—É–¥–µ –Ω—É–¥–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–Ω–∞–π–¥–µ–º —Ç–æ–±—ñ –∫–æ–≥–æ—Å—å\n1. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏"
            }
            end_message = end_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(end_message,reply_markup=show_profiles_markup)
            return NONEACTIVE
        elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "2":
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
            result = cursor.fetchone()
            user_name, user_age, user_bio, user_photo, user_premium = result
            cursor.close()
            conn.close()
            message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}, |{" Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
            your_profile_messages = {
                'T√ºrk√ße': f"Profiliniz:",
                'English': f"Your profile:",
                '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
            }
            your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(your_profile_message)
            await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}",
                                             caption=message_text)
            profile_messages = {
                'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                          f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                          f"3. Biografimi d√ºzenle.\n"
                          f"4. Profilleri G√∂rmeye Ba≈üla.",
                'English': f"1. Edit My Profile.\n"
                           f"2. Change My Profile Picture.\n"
                           f"3. Edit My Bio.\n"
                           f"4. Start Viewing Profiles.",
                '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                           f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                           f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                           f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                              f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                              f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                              f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
            }
            profile_message = profile_messages.get(lang.get(user_id, 0),
                                                   f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(profile_message, reply_markup=menu_markup)

            return MENU_EXE
        else:
            wrong_value_messages = {
                'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
                'English': f"You entered an incorrect value!",
                '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
            }
            wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(wrong_value_message,reply_markup=show_n_not_show_markup)
            return DEACTIVE


async def not_active(update: Update, context: CallbackContext):
    if is_spam(update.effective_user.id):
        await update.message.reply_text("√áok hƒ±zlƒ± mesaj g√∂nderiyorsunuz. Ge√ßici olarak engellendiniz.")
        return NONEACTIVE
    else:
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
        ban = cursor.fetchone()
        cursor.close()
        conn.close()
        if ban:
            await context.bot.send_message(user_id, "You Are banned!")
            return BANNED
        last_mes = context.user_data.get(context.user_data.get('user_id'), update.message.text)
        if last_mes == "Profilleri g√∂r√ºnt√ºle." or last_mes == "View profiles." or last_mes == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã." or last_mes == "–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏.":
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET IsActive = 1 WHERE PersonID = %s", (user_id,))
            cursor.close()
            conn.close()
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
            result = cursor.fetchone()
            user_name, user_age, user_bio, user_photo, user_premium = result
            cursor.close()
            conn.close()
            message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}  {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
            your_profile_messages = {
                'T√ºrk√ße': f"Profiliniz:",
                'English': f"Your profile:",
                '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
            }
            your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                             f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(your_profile_message)
            await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}",
                                             caption=message_text)
            profile_messages = {
                'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                          f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                          f"3. Biografimi d√ºzenle.\n"
                          f"4. Profilleri G√∂rmeye Ba≈üla.",
                'English': f"1. Edit My Profile.\n"
                           f"2. Change My Profile Picture.\n"
                           f"3. Edit My Bio.\n"
                           f"4. Start Viewing Profiles.",
                '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                           f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                           f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                           f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                              f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                              f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                              f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
            }
            profile_message = profile_messages.get(lang.get(user_id, 0),
                                                   f"Unsupported language: {lang.get(user_id, 0)}")
            await update.message.reply_text(profile_message, reply_markup=menu_markup)

            return MENU_EXE
        else:
            wrong_value_messages = {
                'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
                'English': f"You entered an incorrect value!",
                '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
                '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
            }
            wrong_value_message = wrong_value_messages.get(lang.get(user_id, 0),
                                                           f"Unsupported language: {lang.get(user_id, 0)}")
            show_profiles_markup = show_profiles.get(lang.get(user_id, 0))
            show_profiles_markup = ReplyKeyboardMarkup([show_profiles_markup], resize_keyboard=True,
                                                       one_time_keyboard=True)
            await update.message.reply_text(wrong_value_message,reply_markup=show_profiles_markup)
            return NONEACTIVE

async def show_who_likes(update: Update, context: CallbackContext):
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM banned WHERE PersonID = %s", (user_id,))
    ban = cursor.fetchone()
    cursor.close()
    conn.close()
    if ban:
        await context.bot.send_message(user_id, "You Are banned!")
        return BANNED
    yes_markup = yes_text.get(lang.get(user_id, 0))
    yes_markup = ReplyKeyboardMarkup([yes_markup], resize_keyboard=True, one_time_keyboard=True)
    if is_spam(update.effective_user.id):
        await update.message.reply_text("√áok hƒ±zlƒ± mesaj g√∂nderiyorsunuz. Ge√ßici olarak engellendiniz.")
        return SHOW_WHO_LIKES
    else:
        user_id = context.user_data.get('user_id')
        try:
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT LikeUserID FROM Likes WHERE LikedUserID = %s", (user_id,))
            likes = cursor.fetchall()
            cursor.close()
            conn.close()
            len_likes = len(likes)
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "SELECT PersonID, UserName, Age, Bio, Photo FROM Users JOIN Likes ON PersonID = LikeUserID WHERE LikedUserID = %s",
                (user_id,))
            liked_users = cursor.fetchall()[0]
            cursor.close()
            conn.close()
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT PersonID,UserName, Age, Bio, Photo FROM Users WHERE PersonID = %s",
                           (user_id,))
            user_info = cursor.fetchone()
            cursor.close()
            conn.close()
            my_userid, my_user_name, my_user_age, my_user_bio, my_user_photo = user_info
            personid, user_name, user_age, user_bio, user_photo = liked_users
            message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
            my_user_message_text = f"{my_user_name}, {my_user_age}, {my_user_bio if my_user_bio is not None else 'None'}"
            if context.user_data.get(context.user_data.get('user_id'), update.message.text) == "‚ù§Ô∏è":
                await context.bot.send_photo(chat_id=user_id, photo=user_photo, caption=message_text)
                match_messages = {
                    'T√ºrk√ße': f"Harika! Umarƒ±m g√ºzel vakit ge√ßirirsiniz ;)\n\nSohbete ba≈üla üëâ <a href='tg://user?id={personid}'>{user_name}</a>",
                    'English': f"Excellent! Hope you'll have a good time ;)\n\nStart chatting üëâ <a href='tg://user?id={personid}'>{user_name}</a>",
                    '–†—É—Å—Å–∫–∏–π': f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å, —É –≤–∞—Å –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è ;)\n\n–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ üëâ <a href='tg://user?id={personid}'>{user_name}</a>",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í—ñ–¥–º—ñ–Ω–Ω–æ! –°–ø–æ–¥—ñ–≤–∞—é—Å—è, –≤–∞–º –±—É–¥–µ –≤–µ—Å–µ–ª–æ ;)\n\n–ü–æ—á–Ω—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É üëâ <a href='tg://user?id={personid}'>{user_name}</a>"
                }
                match_message = match_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(match_message,parse_mode='HTML')
                await context.bot.send_photo(chat_id=personid, photo=my_user_photo, caption=my_user_message_text)
                user_match_messages = {
                    'T√ºrk√ße': f"Harika! Umarƒ±m g√ºzel vakit ge√ßirirsiniz ;)\n\nSohbete ba≈üla üëâ <a href='tg://user?id={my_userid}'>{my_user_name}</a>",
                    'English': f"Excellent! Hope you'll have a good time ;)\n\nStart chatting üëâ <a href='tg://user?id={my_userid}'>{my_user_name}</a>",
                    '–†—É—Å—Å–∫–∏–π': f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;)\n\n –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—èüëâ<a href='tg://user?id={my_userid}'>{my_user_name}</a>",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ß—É–¥–æ–≤–æ! –°–ø–æ–¥—ñ–≤–∞—é—Å—è, –¥–æ–±—Ä–µ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ —á–∞—Å ;)\n\n –ü–æ—á–∏–Ω–∞–π —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—èüëâ<a href='tg://user?id={my_userid}'>{my_user_name}</a>"
                }
                user_match_message = user_match_messages.get(lang.get(personid, 0),f"Unsupported language: {lang.get(user_id, 0)}")
                await context.bot.send_message(chat_id=personid, text=user_match_message,parse_mode='HTML')
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s", (personid, user_id))
                cursor.execute("DELETE FROM Likes WHERE LikedUserID = %s AND LikeUserID = %s", (user_id, personid))
                cursor.close()
                conn.close()
                return SHOW_WHO_LIKES
            elif context.user_data.get(context.user_data.get('user_id'), update.message.text) == "üëé":
                conn = connection_pool.get_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s", (personid, user_id))
                cursor.close()
                conn.close()
                return SHOW_WHO_LIKES
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT PersonID, UserName, Age, Bio, Photo FROM Users JOIN Likes ON PersonID = LikeUserID WHERE LikedUserID = %s", (user_id,))
            liked_users = cursor.fetchall()[0]
            cursor.close()
            conn.close()
            if len_likes == 0:
                return_messages = {
                    'T√ºrk√ße': f"Buraya kadar, geri d√∂nmek istermisin?",
                    'English': f"That's all for now. Move on?",
                    '–†—É—Å—Å–∫–∏–π': f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏"
                }
                return_message = return_messages.get(lang.get(user_id, 0),
                                                               f"Unsupported language: {lang.get(user_id, 0)}")

                await update.message.reply_text(return_message, reply_markup=yes_markup)
                return MATCHING
            userid, user_name, user_age, user_bio, user_photo = liked_users
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "SELECT MesToPerson FROM Likes WHERE LikeUserID = %s AND LikedUserID = %s",
                (userid, user_id))
            mes_to_person_result = cursor.fetchone()
            mes_to_person = mes_to_person_result[0]
            cursor.close()
            conn.close()
            if mes_to_person is not None and mes_to_person != 'None':
                message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}\n\n\n Bu ki≈üinin size bir mesajƒ± var:\n {mes_to_person}"
            else:
                message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'}"
            await update.message.reply_photo(user_photo, caption=message_text, reply_markup=like_or_not_markup)
        except Exception as e:
            pass
        finally:
            conn = connection_pool.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT LikeUserID FROM Likes WHERE LikedUserID = %s", (user_id,))
            likes = cursor.fetchall()
            len_likes = len(likes)
            cursor.close()
            conn.close()
            if len_likes == 0:
                return_messages = {
                    'T√ºrk√ße': f"Buraya kadar, geri d√∂nmek istermisin?",
                    'English': f"That's all for now. Move on?",
                    '–†—É—Å—Å–∫–∏–π': f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
                    '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏"
                }
                return_message = return_messages.get(lang.get(user_id, 0),
                                                     f"Unsupported language: {lang.get(user_id, 0)}")
                await update.message.reply_text(return_message, reply_markup=yes_markup)
                return SHOW_PROFILE
            else:
                return SHOW_WHO_LIKES
async def premium_sale(update: Update, context: CallbackContext):
    if update.message.text == '1 Aylƒ±k' or update.message.text == '1 Month' or update.message.text == '1 –º–µ—Å—è—Ü' or update.message.text == '1 –º—ñ—Å—è—Ü—å':
        price = '999'
    elif update.message.text == '6 Aylƒ±k' or update.message.text == '6 Months' or update.message.text == '6 –º–µ—Å—è—Ü–µ–≤' or update.message.text == '6 –º—ñ—Å—è—Ü—ñ–≤':
        price = '3999'
    elif update.message.text == '1 Yƒ±llƒ±k' or update.message.text == '1 Year' or update.message.text == '1 –≥–æ–¥' or update.message.text == '1 —Ä—ñ–∫':
        price = '4999'
    elif update.message.text == "Geri d√∂n" or update.message.text == "Go back" or update.message.text == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" or update.message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥":
        user_id = context.user_data.get('user_id')
        conn = connection_pool.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT UserName, Age, Bio, Photo, Premium FROM Users WHERE PersonID = %s", (user_id,))
        result = cursor.fetchone()
        user_name, user_age, user_bio, user_photo, user_premium = result
        cursor.close()
        conn.close()
        message_text = f"{user_name}, {user_age}, {user_bio if user_bio is not None else 'None'} {"| Premium ‚ù§Ô∏è‚Äçüî• " if user_premium > 0 else ''}"
        your_profile_messages = {
            'T√ºrk√ße': f"Profiliniz:",
            'English': f"Your profile:",
            '–†—É—Å—Å–∫–∏–π': f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        }
        your_profile_message = your_profile_messages.get(lang.get(user_id, 0),
                                                         f"Unsupported language: {lang.get(user_id, 0)}")
        await update.message.reply_text(your_profile_message)
        await update.message.reply_photo(f"{user_photo if user_photo is not None else 'None'}", caption=message_text)
        profile_messages = {
            'T√ºrk√ße': f"1. Profilimi D√ºzenle.\n"
                      f"2. Profil fotoƒürafƒ±mƒ± deƒüi≈ütir.\n"
                      f"3. Biografimi d√ºzenle.\n"
                      f"4. Profilleri G√∂rmeye Ba≈üla.\n",
            'English': f"1. Edit My Profile.\n"
                       f"2. Change My Profile Picture.\n"
                       f"3. Edit My Bio.\n"
                       f"4. Start Viewing Profiles.",
            '–†—É—Å—Å–∫–∏–π': f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ. \n"
                       f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.\n"
                       f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                       f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n"
                          f"2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ. \n"
                          f"3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n"
                          f"4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏."
        }
        profile_message = profile_messages.get(lang.get(user_id, 0), f"Unsupported language: {lang.get(user_id, 0)}")
        await context.bot.send_message(user_id, profile_message, reply_markup=menu_markup)
        return MENU_EXE
    else:
        wrong_value_messages = {
            'T√ºrk√ße': f"Yanlƒ±≈ü bir deƒüer girdiniz!",
            'English': f"You entered an incorrect value!",
            '–†—É—Å—Å–∫–∏–π': f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!"
        }
        wrong_value_message = wrong_value_messages.get(lang.get(context.user_data.get('user_id'), 0),f"Unsupported language: {lang.get(context.user_data.get('user_id'), 0)}")
        user_id = update.effective_user.id
        pay_markup = pay_choice.get(lang.get(user_id, 0))
        pay_markup = ReplyKeyboardMarkup([pay_markup], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(wrong_value_message,reply_markup=pay_markup)
        return PREMIUM
    formatted_link = pay(user_id=context.user_data.get('user_id'),price=price)
    premium_999_messages = {
            'T√ºrk√ße': f"Satƒ±n alƒ±mƒ± ger√ßekle≈ütirmek i√ßin l√ºtfen baƒülantƒ±yƒ± takip edin \n\n üëâ <a href='{formatted_link}'>StanbulDatePremium üõç</a>",
            'English': f"Please follow the link to make the purchase \n\n üëâ <a href='{formatted_link}'>StanbulDatePremium üõç</a>",
            '–†—É—Å—Å–∫–∏–π': f"–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ \n\n üëâ<a href='{formatted_link}'>StanbulDatePremium üõç</a>",
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': f"–î–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º \n\n üëâ<a href='{formatted_link}'>StanbulDatePremium üõç</a>"
        }
    premium_999_message = premium_999_messages.get(lang.get(context.user_data.get('user_id'), 0),f"Unsupported language: {lang.get(context.user_data.get('user_id'), 0)}")
    go_back_text_markup = go_back_text.get(lang.get(context.user_data.get('user_id'), 0))
    go_back_text_markup = ReplyKeyboardMarkup([go_back_text_markup], resize_keyboard=True,
                                              one_time_keyboard=True)
    await context.bot.send_message(chat_id=context.user_data.get('user_id'), text=premium_999_message, parse_mode='HTML',reply_markup=go_back_text_markup)
    return SHOW_PROFILE
async def banned_user(update:Update,context: CallbackContext):
    pass
async def language_control(context: CallbackContext):
    user_id = context.user_data.get('user_id')
    conn = connection_pool.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT Language FROM Users WHERE PersonID = %s", (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    if result:
        lang[user_id] = result[0]
        context.user_data['lang'] = result[0]
    else:
        pass
def main():
    app = Application.builder().token(Token).build()
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(None, check_user_state),
            CommandHandler("start", start_command),
        ],
        states={
            CHECK_USER_STATE:[
                MessageHandler(None,
                                 check_user_state)
            ],
            LANGUAGE_COMMAND:[
                CommandHandler("language", language_command)
            ],
            LANGUAGE:[
                MessageHandler(None,
                                 language)
            ],
            NAME:[
                MessageHandler(filters.Regex("^(üá¨üáß English|üáπüá∑ T√ºrk√ße|üá∑üá∫ –†—É—Å—Å–∫–∏–π|üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)$"),
                               set_name
                               )

            ],
            AGE: [
                MessageHandler(None,
                               set_age
                               ),
            ],
            GENDER: [
                MessageHandler(None,
                               set_gender
                               ),
            ],
            LOOKING: [
                MessageHandler(filters.Regex("^(Erkek|Kƒ±z|Male|Female|–Ø –ø–∞—Ä–µ–Ω—å|–Ø –¥–µ–≤—É—à–∫–∞|–Ø —Ö–ª–æ–ø–µ—Ü—å|–Ø –¥—ñ–≤—á–∏–Ω–∞|/language)$"),
                               set_looking
                               ),
            ],
            CITY: [
                MessageHandler(filters.Regex("^(Erkekler|Kƒ±zlar|Boys|Girls|–ü–∞—Ä–Ω–∏|–î–µ—É—à–∫–∏|–•–ª–æ–ø—Ü—ñ|–î—ñ–≤—á–∞—Ç–∞|/language)$"),
                               set_city
                               ),
            ],
            BIO: [
                MessageHandler(filters.Regex("^(Avrupa Yakasƒ±|Istanbul Yakasƒ±|European side|Istanbul side|–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞|–°—Ç–∞–º–±—É–ª –°–∏–¥–µ|–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞|–°—Ç–∞–º–±—É–ª –°—ñ–¥–µ|/language)$"),
                               set_bio
                               )
            ],
            CHANGEBIO: [
                MessageHandler(None,
                               change_bio
                               ),
            ],
            PHOTO: [
                MessageHandler(None,
                               set_photo
                               )
            ],
            SAVEPHOTO: [
                MessageHandler(None,
                               save_photo
                               )
            ],
            SAVE_MESSAGE: [
                MessageHandler(None,
                               save_the_message
                               ),
            ],
            SHOW_PROFILE: [
                MessageHandler(None,
                               show_profile
                               ),
            ],
            MENU_EXE: [
                MessageHandler(None,
                               menu_exe
                               ),
            ],
            WAIT_MENU_EXE: [
                MessageHandler(None,
                               wait_menu_exe
                               ),
            ],
            MATCHING: [
                MessageHandler(None,
                               matching
                               ),
            ],
            DEACTIVE: [
                MessageHandler(None,
                               de_active_or_not
                               ),
            ],
            NONEACTIVE: [
                MessageHandler(None,
                               not_active
                               ),
            ],
            SHOW_WHO_LIKES: [
                MessageHandler(None,
                               show_who_likes
                               ),
            ],
            REPORT_USER: [
                MessageHandler(None,
                               report_user
                               ),
            ],
            PREMIUM: [
                MessageHandler(None,
                               premium_sale
                               ),
            ],
            BANNED:[
                MessageHandler(None,
                               banned_user
                               ),
            ]
        },
        fallbacks=[MessageHandler(filters.Regex("^Profilleri G√∂rmeye ba≈üla$"), show_profile)],
        per_user=True
    )

    # Handlers
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("language",language_command))
    # Start the updater
    app.run_polling()


if __name__ == '__main__':
    main()
